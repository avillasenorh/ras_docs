{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rapidAlignerSeismic Documentation rapidAlignerSeismic is a Python package for aligning seismic waveforms based on their similarity. It is based on the NVIDIA library rapidAligner , a CUDA-accelerated library to align short time series snippets in an exceedingly long stream of time series. For rapidAlignerSeismic the short series snippets (queries) will be earthquake templates, and the long stream (subject) will be the continuous seismic recording. Skeleton for documentation following the approach of: Tutorials How-to Guides Reference Discussion","title":"rapidAlignerSeismic Documentation"},{"location":"#rapidalignerseismic-documentation","text":"rapidAlignerSeismic is a Python package for aligning seismic waveforms based on their similarity. It is based on the NVIDIA library rapidAligner , a CUDA-accelerated library to align short time series snippets in an exceedingly long stream of time series. For rapidAlignerSeismic the short series snippets (queries) will be earthquake templates, and the long stream (subject) will be the continuous seismic recording. Skeleton for documentation following the approach of: Tutorials How-to Guides Reference Discussion","title":"rapidAlignerSeismic Documentation"},{"location":"discussions/discussions/","text":"DISCUSSIONS","title":"Discussions"},{"location":"discussions/discussions/#discussions","text":"","title":"DISCUSSIONS"},{"location":"howto/examples/","text":"Run the example data The distribution comes with an example dataset in the data directory: $ cd rapidalignerseismic $ cd data $ ls -1 hits_cchile/ # output directory with correlation arrival times templates_chile/ # directory with earthquake templates in miniSEED format wf_chile/ # directory with continuous waveform data","title":"Examples"},{"location":"howto/examples/#run-the-example-data","text":"The distribution comes with an example dataset in the data directory: $ cd rapidalignerseismic $ cd data $ ls -1 hits_cchile/ # output directory with correlation arrival times templates_chile/ # directory with earthquake templates in miniSEED format wf_chile/ # directory with continuous waveform data","title":"Run the example data"},{"location":"howto/installation/","text":"Installation Clone the repository from GitLab : $ git clone https://gitlab.com/seismic_imaging/rapidalignerseismic Checkout the motif_searching branch: $ cd rapidalignerseismic $ git checkout motif_searching Download the singularity container in the top directory of the repository. The name of the container is Container_rapid.simg Create a file called singularity_bashrc with the following contents: # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/usr/local/miniconda/etc/profile.d/conda.sh\" ]; then . \"/usr/local/miniconda/etc/profile.d/conda.sh\" else export PATH=\"/usr/local/miniconda/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< These are the typical instructions added by Anaconda (or Miniconda ) to the user's .bashrc file to initialize the conda installer.","title":"Installation"},{"location":"howto/installation/#installation","text":"Clone the repository from GitLab : $ git clone https://gitlab.com/seismic_imaging/rapidalignerseismic Checkout the motif_searching branch: $ cd rapidalignerseismic $ git checkout motif_searching Download the singularity container in the top directory of the repository. The name of the container is Container_rapid.simg Create a file called singularity_bashrc with the following contents: # >>> conda initialize >>> # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/usr/local/miniconda/etc/profile.d/conda.sh\" ]; then . \"/usr/local/miniconda/etc/profile.d/conda.sh\" else export PATH=\"/usr/local/miniconda/bin:$PATH\" fi fi unset __conda_setup # <<< conda initialize <<< These are the typical instructions added by Anaconda (or Miniconda ) to the user's .bashrc file to initialize the conda installer.","title":"Installation"},{"location":"reference/reference/","text":"REFERENCE","title":"Reference"},{"location":"reference/reference/#reference","text":"","title":"REFERENCE"},{"location":"tutorials/tutorials/","text":"How to run your own data #!/usr/bin/env bash set -u [[ $# != 1 ]] && { echo \"usage: run_ras.sh parfile\"; exit 1; } [[ ! -s $1 ]] && { echo \"ERROR: parameter file does not exist: $1\"; exit 1; } cur_dir=${PWD} parfile=\"$1\" ras_dir=${HOME}/repos/rapidalignerseismic [[ ! -d $ras_dir ]] && { echo \"ERROR: rapidalignerseismic directory does not exist\": exit 1; } [[ ! -s $ras_dir/singularity_bashrc ]] && { echo \"ERROR: singularity_bashrc does not exist\": exit 1; } cp ~/.bashrc ~/.bashrc_save cp $ras_dir/singularity_bashrc ~/.bashrc cd $ras_dir /bin/rm -f runAll.$$.sh touch runAll.$$.sh echo \"source ~/.bashrc\" >> runAll.$$.sh echo \"conda activate rapidSis\" >> runAll.$$.sh echo \"#pip install mpi4py\" >> runAll.$$.sh echo '#python -c \"import mpi4py\" 2> /dev/null || pip install mpi4py' >> runAll.$$.sh echo \"cd notebooks\" >> runAll.$$.sh echo \"mpirun -n 1 python ras_multiGPU.py -m Standard -r $parfile\" >> runAll.$$.sh echo \"conda deactivate\" >> runAll.$$.sh echo \"exit\" >> runAll.$$.sh chmod 755 runAll.$$.sh /bin/cp $cur_dir/$parfile notebooks singularity exec --nv --bind /scratch2 --bind /sismo1 Container_rapid.simg ./runAll.$$.sh #sleep 20 /bin/rm -f ./runAll.$$.sh cp ~/.bashrc_save ~/.bashrc","title":"Run your own data"},{"location":"tutorials/tutorials/#how-to-run-your-own-data","text":"#!/usr/bin/env bash set -u [[ $# != 1 ]] && { echo \"usage: run_ras.sh parfile\"; exit 1; } [[ ! -s $1 ]] && { echo \"ERROR: parameter file does not exist: $1\"; exit 1; } cur_dir=${PWD} parfile=\"$1\" ras_dir=${HOME}/repos/rapidalignerseismic [[ ! -d $ras_dir ]] && { echo \"ERROR: rapidalignerseismic directory does not exist\": exit 1; } [[ ! -s $ras_dir/singularity_bashrc ]] && { echo \"ERROR: singularity_bashrc does not exist\": exit 1; } cp ~/.bashrc ~/.bashrc_save cp $ras_dir/singularity_bashrc ~/.bashrc cd $ras_dir /bin/rm -f runAll.$$.sh touch runAll.$$.sh echo \"source ~/.bashrc\" >> runAll.$$.sh echo \"conda activate rapidSis\" >> runAll.$$.sh echo \"#pip install mpi4py\" >> runAll.$$.sh echo '#python -c \"import mpi4py\" 2> /dev/null || pip install mpi4py' >> runAll.$$.sh echo \"cd notebooks\" >> runAll.$$.sh echo \"mpirun -n 1 python ras_multiGPU.py -m Standard -r $parfile\" >> runAll.$$.sh echo \"conda deactivate\" >> runAll.$$.sh echo \"exit\" >> runAll.$$.sh chmod 755 runAll.$$.sh /bin/cp $cur_dir/$parfile notebooks singularity exec --nv --bind /scratch2 --bind /sismo1 Container_rapid.simg ./runAll.$$.sh #sleep 20 /bin/rm -f ./runAll.$$.sh cp ~/.bashrc_save ~/.bashrc","title":"How to run your own data"}]}